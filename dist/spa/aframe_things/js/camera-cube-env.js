AFRAME.registerComponent("camera-cube-env",{schema:{resolution:{type:"number",default:128},distance:{type:"number",default:1e5},interval:{type:"number",default:1e3},repeat:{type:"boolean",default:!1}},multiple:!1,init:function(){this.counter=this.data.interval,this.cam=new THREE.CubeCamera(1,this.data.distance,this.data.resolution),this.cam.renderTarget.texture.minFilter=THREE.LinearMipMapLinearFilter,this.cam.renderTarget.texture.generateMipmaps=!0,this.el.object3D.add(this.cam),this.done=!1;this.cam,this.el,this.el.getObject3D("mesh");document.querySelector("a-scene").addEventListener("loaded",(function(e,t,i){i&&i.traverse((function(t){t instanceof THREE.Mesh&&(t.material.envMap=e.renderTarget.texture,t.material.needsUpdate=!0)}))}))},tick:function(e,t){var i=this.cam;this.done||(this.counter>0?this.counter-=t:(this.mesh=this.el.getObject3D("mesh"),this.mesh&&(this.mesh.visible=!1,AFRAME.scenes[0].renderer.autoClear=!0,i.position.copy(this.el.object3D.worldToLocal(this.el.object3D.getWorldPosition(i.position))),i.update(AFRAME.scenes[0].renderer,this.el.sceneEl.object3D),this.mesh.traverse((function(e){e instanceof THREE.Mesh&&(e.material.envMap=i.renderTarget.texture,e.material.needsUpdate=!0)})),this.mesh.visible=!0,this.data.repeat||(this.done=!0,this.counter=this.data.interval))))},update:function(e){this.counter=this.data.interval,this.cam=new THREE.CubeCamera(1,this.data.distance,this.data.resolution),this.cam.renderTarget.texture.minFilter=THREE.LinearMipMapLinearFilter,this.el.object3D.add(this.cam),this.done=!1;var t=this.cam;this.mesh=this.el.getObject3D("mesh"),this.mesh&&this.mesh.traverse((function(e){e instanceof THREE.Mesh&&(e.material.envMap=t.renderTarget.texture,t.renderTarget.texture.generateMipmaps=!0,e.material.needsUpdate=!0)}))},remove:function(){},pause:function(){},play:function(){}});